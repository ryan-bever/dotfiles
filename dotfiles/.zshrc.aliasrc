# Allow watch to work with alias
# https://unix.stackexchange.com/questions/25327/watch-command-alias-expansion
alias watch='watch --color '

alias a='. ~/.aliasrc'

# Some shortcuts for different directory listings
alias ls='ls -FGh --color'              # classify files in colour
alias ll='ls -l'                # long list
alias la='ls -A'                # all but . and ..
alias lla='ls -lA'              # all but . and ..
alias llah='ls -lAh'            # all but . and ..

# git
alias cdr='cd "$(git rev-parse --show-toplevel)"'
alias rebase='git fetch && git rebase -i origin/main'
alias ga='git commit --amend --no-edit -a'
alias gaf="git commit --amend --no-edit -a && git push --force"

# folders


# grep and ag
alias egrep='egrep --color'
alias grep='egrep'

alias agi='ag --ignore-case'
alias ags='ag --case-sensitive' # --smart-case is the default

alias agl='ag --literal'
alias aglc='ag --context=2 --literal'
alias agli='ag --ignore-case --literal'
alias agls='ag --case-sensitive --literal'
alias agnt="ag --literal --ignore '*_test.py'"

alias lc="tr '[:upper:]' '[:lower:]'"
alias uuidgen="/usr/bin/uuidgen | lc | tee >(pbcopy)"



alias please='sudo $(fc -ln -1)'


# k8s 
alias k="kubectl"
alias kd="kubectl describe"
alias kns="kubectl config set-context --current --namespace"
alias mk="minikube"
alias klog="kubectl logs --follow"
alias klogs="kubectl logs --follow"
alias cc="kubectl config current-context"
alias uc="kubectl config use-context"


# alias does not accept parameters but a function can be called just like an alias. For pname we need the $1
function pname () { kubectl get pods -o name --all-namespaces | grep $1 }
function dname () { kubectl get deployments.apps -o name --all-namespaces -lapp.kubernetes.io/name=$1 }


# docker-gc is no longer maintained in favor of docker system prune https://docs.docker.com/engine/reference/commandline/system_prune/
# Add images to /etc/docker-gc-exclude to exclude them from docker-gc
# alias docker-gc="docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /etc:/etc -e FORCE_IMAGE_REMOVAL=1 -e FORCE_CONTAINER_REMOVAL=1 spotify/docker-gc"
alias docker-gc="docker system prune --volumes"

alias postman='open -a Postman'

alias ascii-colors='for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done'


function _jqlogs() {
  jq -cr --raw-input '
    def levelColor: {
      "trace4": "\u001b[38;5;8m",
      "trace3": "\u001b[38;5;8m",
      "trace2": "\u001b[38;5;8m",
      "trace": "\u001b[38;5;2m",
      "debug": "\u001b[38;5;5m",
      "info": "\u001b[38;5;4m",
      "warn": "\u001b[38;5;3m",
      "error": "\u001b[38;5;1m",
      "fatal": "\u001b[38;5;1m"
    };
    def rpad($len; $fill): tostring | ($len - length) as $l | . + ($fill * $l)[0:$l];
    . as $line |
    try (
      fromjson |
      (
        # The 21.08 release used a "ts" field only one of these timestamp fields should print
        # "\u001b[38;5;3m" + (.ts | todateiso8601) + "\u001b[0m" + 
        "\u001b[38;5;3m" + .timestamp + "\u001b[0m" + "    " +
        (try(levelColor[.level]) catch "") + (.level | ascii_upcase | rpad(8; " ")) + "\u001b[0m" +
        "\u001b[38;5;6m" + (.logger | rpad(30;" "))[0:30] + "\u001b[0m" + 
        (try(levelColor[.level]) catch "") + "  " + .msg + "    " + "\u001b[0m" +
        (. | del(.ts, .timestamp, .level, .msg, .application, .component, .logger) | tojson | " \u001b[38;5;7m" + . + "\u001b[0m")
      )
    ) catch $line'
}

if [ -f ~/.zshrc.aliasrc.local ]; then
    source ~/.zshrc.aliasrc.local
fi
